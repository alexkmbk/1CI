{
  "name": "1ci",
  "tagline": "Repository manager for 1C: Enterprise platform. The main idea of the project - continuous integration.",
  "body": "# 1CI\r\nRepository manager for 1C: Enterprise platform. The main idea of the project - continuous integration.\r\n\r\n# The main idea\r\n\r\nWhen you develop configuration in a team, you often need to do some\r\nroutine operations, such as for example:\r\n\r\n-   Everyday make a dump of configuration from a repository and sending the\r\n    result to partners;\r\n-   Do many different tests, standard module check for example or some\r\n    tests that could be made by some special software;\r\n-   Informing your partners and coworkers about found errors in the\r\n    configuration by email or IM like Skype or Telegram.\r\n-   Load new version of the configuration into working database.\r\n\r\nSo this project (configuration) is intended for automation such things.\r\nThe part of the name of the project is abbreviation from Continuous\r\nIntegration, which is a reference to the conception that was\r\ninspirational idea for the project.\r\n\r\n# General description.\r\n\r\nConfiguration: independent, without necessity of integration;\r\n\r\nPlatform: 8.3;\r\n\r\nInterface: Taxi;\r\n\r\nSubsystems Library (SSL): 2.2.4.4 (English version);\r\n\r\nScript language: english;\r\n\r\nMode: Asynchronous.\r\n\r\nThe main functionality of the configuration is based on \"Repositories\"\r\ncatalog. Each element of the catalog corresponds to a particular\r\ndeveloping repository. For each element of the catalog defined list of\r\nusers that have a permission of working with the repository.\r\n\r\nThe list of tasks that should be automated is defined in the catalog\r\n“Tasks”, its owner is the catalog “Repositories”. Tasks could be run by\r\nseveral different ways:\r\n\r\n-   manually, from 1C:Enterprise client;\r\n-   on the schedule;\r\n-   from command line;\r\n-   by http-request;\r\n-   by COM connector.\r\n\r\nEach task has the list of actions that should be executed. Actions are\r\nrunning one after one according to serial number of action in the list.\r\n\r\nEach action is an element of the catalog “Actions”. An action is\r\nconnected to a data processor which could be internal or external, from\r\nAdditionalReportsAndDataProcessors SSL subsystem catalog. Data\r\nprocessors provide an algorithm that should be executed during task\r\nrunning.\r\n\r\n![alt tag](1CI/Description/TasksDiagram.png)\r\n\r\nDuring task running process, there is a list of common parameters in a\r\nmemory which is available for data processors and shared between them.\r\nThe list exists only while a task is running. One of the most important\r\nparameters is a path to a dump of a configuration. The path parameter is\r\nbeing created before making a dump and it guaranties that all data\r\nprocessors would work with the same path. So, for example, if a task has\r\ntwo actions: one for making a dump and another one for making a test, you\r\nneed to place the dumping action at a first position in an action list\r\nso, for another one there will be available the dump at known path.\r\n\r\nAn information about running actions and results of their work is being\r\nwritten in the database by the logging subsystem.\r\n\r\nEach action is being written in independent way from the others, so if\r\nthe whole process was crashed it is still possible to see on which step\r\nthe crash was occurred.\r\n\r\nThere is a mechanism of notification about task execution results in the\r\nconfiguration.\r\n\r\nThe report about successful done or failed task could be sent through\r\nemail or Telegram IM to a list of recipients. And it is possible to set two\r\ndifferent list of recipients, the one for successfully executed task and\r\nthe other one about failures. Because sometime it is unnecessary to\r\ninform everyone about successful results.\r\n\r\nFor each action data processor, it could be defined some individual\r\nparameters, which will be saved in the “ActionParams” attribute of the\r\n“Actions” table of the “Task” catalog.\r\n\r\nThe action parameters editing interface should be provided by a data\r\nprocessor itself.\r\n\r\nEmail sending mechanism is provided by “EmailAccounts” subsystem of SSL.\r\n\r\nTesting as all others actions could be provided by various additional\r\nspecial data processors connected to the catalog “Actions”. In the\r\nconfiguration there are several internal testing data processors:\r\n\r\n- standard module checking (****CheckModules****\r\ncommand line option ).\r\n\r\n- run test scripts (new testing mechanism in version 8.3).\r\n\r\n- reposting the list of documents (it is possible to\r\ncatch some errors during reposting a document).\r\n\r\n- making list of reports.\r\n\r\n# Metadata objects of the configuration (what is already done)\r\n\r\nCatalog “Repositories”\r\n======================\r\n\r\n**Attributes:**\r\n\r\nPath &lt;String&gt;— the path to the repository ;\r\n\r\nWorkingDir &lt;String&gt; - the path to the directory where could be\r\nstored some files needed for working, for example there will be placed\r\nthe database, bound to a repository. If it is not defined, it would be\r\nused user's temporary directory.\r\n\r\nPlatformPath &lt;String&gt; - the path to the platform executable file.\r\nIf it is not defined, it would be used the path given by BinDir()\r\nfunction.\r\n\r\nDBDir &lt;String&gt; - the path to a database which it bound to the\r\nrepository. If it is not defined, it would be used the path\r\n“WorkingDir\\\\DB\\\\”.\r\n\r\nConfBackupDir &lt;String&gt; - the path where should be stored dumps\r\nfrom the repository. If it is not defined, it would be used the path\r\n“WorkingDir\\\\Backup”.\r\n\r\nScheduledJobUser &lt;CatalogRef.Users&gt; - the user from the whom name\r\nwill execute scheduled task.\r\n\r\nTestDBDir &lt;String&gt; - path to test-database directory.\r\n\r\nTestDBAdminName &lt;String&gt; - test DB admin name\r\n\r\nTestDBAdminPassword &lt;String&gt; - test DB admin password\r\n\r\nCatalog “Actions”\r\n=================\r\n\r\n**Attributes:**\r\n\r\nIsInternal &lt;Boolean&gt; - determines whether the data processor is\r\ninternal or not.\r\n\r\nInternalDataProcessor &lt;String&gt; - the name of internal data\r\nprocessor.\r\n\r\nDataProcessor &lt;CatalogRef.AdditionalReportsAndDataProcessors&gt; -\r\nthe reference to the element of “AdditionalReportsAndDataProcessors”\r\ncatalog. It should be set if the data processor is external.\r\n\r\nCatalog “Tasks”\r\n===============\r\n\r\n**Attributes:**\r\n\r\nScheduledJobGUID &lt;UUID&gt; - the ID of the scheduled job.\r\n\r\nRunBySchedule&lt;Boolean&gt; - determines if the task should be run by\r\nscheduled job.\r\n\r\n**Tabular sections:**\r\n\r\nActions, attributes:\r\n\r\nAction &lt;CatalogRef.Actions&gt;.\r\n\r\nActionParams &lt;String&gt; - the string of individual action parameters\r\nof the data processor (in case there are some in a data processor). The\r\nstring is generated by function ValueToStringInternal\r\n\r\nfrom structure of parameters.\r\n\r\nUUID &lt;UUID&gt; - action parameters identifier.\r\n\r\nFailureReportRecipients, attributes:\r\n\r\nRecipient &lt;CatalogRef.ReportRecipients&gt;.  \r\n\r\nSuccessReportRecipients, attributes:\r\n\r\nRecipient &lt;CatalogRef.ReportRecipients&gt;.  \r\n\r\nCatalog «ReportRecipients»\r\n=========================\r\n\r\n**Attributes:**  \r\nEmail &lt;String&gt; - recipient's email.    \r\n\r\nTelegramUserName &lt;String&gt; - user name in Telegram IM.    \r\n\r\nByEmail &lt;Boolean&gt; - determines if task report should be sent by email.    \r\n\r\nByTelegram &lt;Boolean&gt; - determines if task report should be sent by Telegram.    \r\n\r\nDocument “TaskRunningEvent”\r\n===========================\r\n\r\nThe document is intended to log task events. Each particular document\r\nrepresents one task execution.\r\n\r\n**Attributes:**\r\n\r\nState &lt;Enum.TaskState&gt;- the state of task execution.\r\n\r\nTask &lt;CatalogRef.Tasks&gt; - the reference to executing task.\r\n\r\nRepository &lt;CatalogRef.Repositories&gt; - the reference to the\r\ncatalog “Repositories”. This attribute is for optimization record level\r\n(RLS) access restriction to “Repositories” catalog related data.\r\n\r\nThe document doesn’t support posting. At a beginning of task execution,\r\nsystem creates and writes the document with the state “Started”. During\r\ntask execution process, logging information could be stored in the\r\ninformation register “ActionEventsLog” (would be described further)\r\nwhere one of the dimension is a reference to TaskRunningEvent document,\r\nbut the register and the document are not connected by posting\r\nmechanism.\r\n\r\nIf all actions were executed, the value of the attribute “State” will be\r\nset as “Success” or “Error” it depends on whether it was successful\r\nexecution or not.\r\n\r\nInformation register “ActionEventsLog”\r\n======================================\r\n\r\nThe register is intended to log action events. One action during running\r\ncan write several events.\r\n\r\n**Periodicity:** No.\r\n\r\n**Write mode:** Independent.\r\n\r\n**Dimensions:**\r\n\r\nTaskRunningEvent &lt;DocumentRef.TaskRunningEvent&gt;.\r\n\r\nLineNum &lt;Number 9,0&gt; - the serial number of the event, the\r\nnumeration is implementing through one task.\r\n\r\n**Resources:**\r\n\r\nAction &lt;CatalogRef.Actions&gt; - the source of event.\r\n\r\nState &lt;EnumRef.ActionEventTypes&gt; - the type of the event\r\n(Start,Error,DetailedInfo,Success);\r\n\r\nDescription &lt;String&gt; - text description of the event.\r\n\r\nDate &lt;DateTime&gt; - event's date and time.\r\n\r\nThe register is not periodic because the record will be selected more\r\noften by reference to the TaskRunningEvent document. So, the reference\r\nshould be at the first position.\r\n\r\nInformation register “RepUsers”\r\n===============================\r\n\r\nThe register is intended to store repository users. For the repository\r\nshould be defined at least one user.\r\n\r\n**Periodicity:** No.\r\n\r\n**Write mode:** Independent.\r\n\r\n**Dimensions:**\r\n\r\nUser &lt;CatalogRef.Users&gt; - the reference to the “Users” catalog\r\nfrom Users subsystem of SSL.\r\n\r\nRepository &lt;CatalogRef.Repositories&gt; - the repository.\r\n\r\n**Resources:**\r\n\r\nRepUserName &lt;String&gt; - the name of repository user.\r\n\r\nRepPassword &lt;String&gt; - the repository password.\r\n\r\nInformation register \"TelegramUsersInfo\"\r\n===========================\r\n\r\nThe register is intended to store technical information needed for sending messages by Telegrem-bot about executed tasks.\r\n\r\n**Periodicity:** No.\r\n\r\n**Write mode:** Independent.\r\n\r\n**Dimensions:**\r\n\r\nUserName &lt;String&gt; - telegram IM user name\r\n\r\n**Resources:**\r\n\r\nChatID &lt;Number&gt; - Telegram chat ID.\r\n\r\nData processor “StartPage”\r\n==========================\r\n\r\nThe data processor is the desktop for the repository subsystem, it is\r\nintended to provide handy access to repository tasks.\r\n\r\nConstant «TelegramBotToken»\r\n=====================\r\n\r\nValue type: String.\r\nIntended to store Telegram-bot ID.\r\n\r\nConstant «TelegramBotUpdateID»\r\n=====================\r\n\r\nValue type: Number.  \r\nIntended to store ID of last message. Used by Telegram-bot to call HTTP request \"GetUpdates\".\r\n\r\nConstant «TelegramBotPassword»\r\n=====================\r\n\r\nValue type: String.  \r\nIntended to store password for Telegram-bot. If password is set, user should send command /connect <password> to be able to recieve task report.\r\n\r\n\r\nAction data processors\r\n======================\r\n\r\nIf a data processor is intended to be connected to “Actions” catalog, it\r\nshould provide several export functions:\r\n\r\n```Run(LogLineNumber, CommonParams, Action, ActionParams, ShowMessages)```\r\n\r\nparameters:\r\n\r\n**LogLineNumber** - serial number of event.\r\n\r\n**CommonParams** - structure with common params that exist while task\r\nrunning.\r\n\r\n**Action** - reference to the Action catalog element.\r\n\r\n**ActionParams** - params that was set for the action only.\r\n\r\n**StorageAddress** (string) - the address in temporary storage.\r\nBy this adress it is possible to send messages to client (if task is running in interactive mode)\r\n\r\n```IsRepositoryDataProcessor()``` - returns True if it is repository data\r\nprocessor.\r\n\r\n```IsParamsForm()``` -returns True if there available an action parameters\r\nform in the data processor.\r\n\r\nAt that moment, in the configuration available several internal data\r\nprocessors:\r\n\r\n**DumpConfFromRepository** — making dump from repository.\r\n\r\n**SendEmail** - sending email message to the list of predefined recipients.\r\nThe list of recipients and message template could be defined in a\r\nparameters form provided by the data processor itself. In the text\r\nmessage template it is possible to set some parameters in square\r\nbrackets, they will be replaced by corresponded values from\r\n“CommonParams” structure. For example, the parameter\r\n\\[DumpConfFileFullPath\\] will be replaced by the path to repository dump\r\nfile. The mechanism of message templates is still under developing.\r\n\r\n**UpdateDB** — updating the database in DBDir directory from repository.\r\n\r\n**CheckModules** – checking modules of the dump by standard platform\r\ncommand.\r\n\r\n**ExecCommand** - starts an external application by given command and current directory\r\n\r\n**UpdateTestDB** - updates DB in the test DB directory from a repository dump (should be executed after the DumpConfFromRepository action)\r\n\r\n**Reposting** - reposts all documents in test database.\r\n\r\nRole «RepositoryUser»\r\n======================\r\n\r\nProvide access to objects of “Repositories” subsystem. The role has RLS\r\nbased mechanism to implement restrictions to “Repositories” catalog and\r\nto other connected tables.\r\n\r\nAdopted subsystems from SSL\r\n===========================\r\n\r\n-   AdditionalReportsAndDataProcessors\r\n-   BaseFunctionality\r\n-   EmailOperations\r\n-   Users\r\n-   InfobaseVersionUpdate\r\n\r\nRun tasks from command line\r\n===========================\r\n\r\nIn the common module “RepTasks” there is an export function\r\n```RunTaskByCode(RepositoryCatalogCode, TaskCatalogCode)```,\r\n  parameters:\r\n\r\n**RepositoryCatalogCode** – code of a repository in numeric format.\r\n\r\n**TaskCatalogCode** – code of a task in numeric format.\r\n\r\nThe function runs particular task by given codes. It is possible to\r\nexecute this function in one or another way. For example it is possible\r\nto set a special parameter in command line of the platform:\r\nrun\\_RepTasks.RunTaskByCode(&lt;RepositoryCatalogCode&gt;,&lt;TaskCatalogCode&gt;)\r\n\r\nExample:\r\n```\r\n\"C:\\\\Program Files (x86)\\\\1cv8\\\\common\\\\1cestart.exe\" Enterprise\r\n/F\"D:\\\\MyDB\" /N Administrator /P Password\r\n/C\"run\\_RepTasks.RunTaskByCode(1,2)\"\r\n```\r\nIn this example, a task with code 2 of a repository with code 1 will be\r\nrun.\r\n\r\nRun tasks by HTTP-request\r\n=========================\r\n\r\nThere is an HTTP-service in the configuration. The base URL of the\r\nservice is “RunTask”.\r\n\r\nA task could be run by htttp-request in the format:\r\n\r\nhs/RunTask/&lt;RepositoryCatalogCode&gt;/&lt;TaskCatalogCode&gt;\r\n\r\nFor example, if DB is published on the web-server “localhost” under name\r\n“OneCI», then the line of the http-request would looks like:\r\n\r\n<http://localhost/OneCI/hs/RunTask/1/2>\r\n\r\nthere  \r\n\t1 - code of repository in the catalog,  \r\n\t2 – code of task in the\r\ncatalog.\r\n\r\nThe requests should be with “Basic Authentication”.\r\n\r\nThe same request in Python 2 language:\r\n```python\r\nimport urllib\r\n\r\nimport urllib2\r\n\r\nimport base64\r\n\r\nurl = \"http://localhost/OneCI/hs/RunTask/1/2\"\r\n\r\nauthKey = base64.b64encode(\"Administrator:password\")\r\n\r\nheaders = {\"Content-Type\":\"application/json\", \"Authorization\":\"Basic \" +\r\nauthKey}\r\n\r\nrequest = urllib2.Request(url)\r\n\r\nfor key,value in headers.items():\r\n\r\nrequest.add_header(key,value)\r\n\r\nresponse = urllib2.urlopen(request)\r\n\r\nprint response.getcode()\r\n```\r\nThere the name of the database user is - Administrator, and the Password - password.\r\n\r\n\r\nRun tasks by COM connector\r\n=========================\r\n\r\nThe common module \"RepTasks\" is available for external connection, so it is possible\r\nto call \"RunTaskByCode\" method by COM connector.\r\n\r\nExample for 1C: Enterprise language:\r\n```\r\nConnector = new COMObject(\"V83.COMConnector\");\r\nConnection = Connector.connect(\"file=D:\\\\dev\\\\1c\\\\1CI;Usr=Administrator;\");\r\nConnection.RepTasks.RunTaskByCode(1,2);\r\n```\r\nthere:  \r\n\t  1 -  the code of repository in the catalog \"Repositories\"  \r\n\t  2 - the code of task in the catalog \"Tasks\"\r\n\r\n\r\nExample for python 2.7:\r\n\r\n```python\r\nimport pythoncom\r\nimport win32com.client\r\n\r\npythoncom.CoInitialize()\r\nV83 = win32com.client.Dispatch(\"V83.COMConnector\").Connect(\"file=D:\\\\dev\\\\1c\\\\1CI;Usr=Administrator;\")\r\nV83.RepTasks.RunTaskByCode(1,2)\r\n```\r\n\r\nFor this python example it needed to install \"pythoncom\" module:\r\n```pip install pypiwin32```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}